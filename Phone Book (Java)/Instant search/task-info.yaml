type: edu
files:
- name: src/phonebook/Main.java
  visible: true
  text: |
    package phonebook;

    public class Main {
        public static void main(String[] args) {
            Execute app = new Execute();
            app.executeApp();
        }
    }
  learner_created: false
- name: src/phonebook/Execute.java
  visible: true
  text: |
    package phonebook;

    import java.time.Duration;
    import java.util.List;

    public class Execute {
        private Search search = new Search();
        private Sort sort = new Sort();
        private Input input = new Input();

        public void executeApp() {
            input.scanFiles();

            // Linear Search
            System.out.println("Start searching (linear search)...");
            search.linearSearch(input.getDirectory(), input.getFind());
            printSummary(search.getLinearDuration(), search);
            System.out.println();

            // Bubble sort and Jump Search
            System.out.println("Start searching (bubble sort + jump search)...");
            List<String> sortedDirectory;

            try {
                // Bubble sort
                sortedDirectory = sort.bubbleSort(input.getDirectory(), search.getLinearDuration());
                // Jump-search
                search.jumpSearch(sortedDirectory, input.getFind());
                // Print summaries
                printSummary(sort.getBubbleSortDuration() + search.getJumpDuration(), search);
                printSummary(sort.getBubbleSortDuration(), "Sorting");
                System.out.println();
                printSummary(search.getJumpDuration(), "Searching");
                System.out.println();
                System.out.println();

            } catch (OutOfTimeException e) {
                // Do linear search instead
                search.linearSearch(input.getDirectory(), input.getFind());

                // Print summaries
                printSummary(sort.getBubbleSortDuration() + search.getLinearDuration(), search);
                printSummary(sort.getBubbleSortDuration(), "Sorting");
                System.out.print(e.getMessage());
                System.out.println();
                printSummary(search.getLinearDuration(), "Searching");
                System.out.println();
                System.out.println();
            }

            // QuickSort
            System.out.println("Start searching (quick sort + binary search)...");
            sortedDirectory = sort.quickSort(input.getDirectory());
            // Binary Search
            search.binarySearch(sortedDirectory, input.getFind());
            // Print summaries
            printSummary(sort.getQuickSortDuration() + search.getBinaryDuration(), search);
            printSummary(sort.getQuickSortDuration(), "Sorting");
            System.out.println();
            printSummary(search.getBinaryDuration(), "Searching");
        }

        private void printSummary(long duration, Search search) {
            Duration d = Duration.ofMillis(duration);
            int minutes = d.toMinutesPart();
            int seconds = d.toSecondsPart();
            int milliseconds = d.toMillisPart();
            System.out.printf("Found %d/%d entries. Time taken: %d min. %d sec. %d ms.%n", search.getMatchesCount(), input.getFindSize(), minutes, seconds, milliseconds);
        }

        private void printSummary(long duration, String operation) {
            Duration d = Duration.ofMillis(duration);
            int minutes = d.toMinutesPart();
            int seconds = d.toSecondsPart();
            int milliseconds = d.toMillisPart();
            System.out.printf("%s time: %d min. %d sec. %d ms.", operation, minutes, seconds, milliseconds);
        }
    }
  learner_created: false
- name: src/phonebook/Input.java
  visible: true
  text: |
    package phonebook;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class Input {
        private final List<String> directory = new ArrayList<>();
        private final List<String> find = new ArrayList<>();

        public List<String> getDirectory() {
            return directory;
        }

        public List<String> getFind() {
            return find;
        }

        public int getFindSize() {
            return find.size();
        }

        public int getDirectorySize() {
            return directory.size();
        }

        public void scanFiles() {
            String pathToDirectory = "/Users/marketavosicka/Downloads/directory.txt";
            String pathToFind = "/Users/marketavosicka/Downloads/find.txt";
            File directoryFile = new File(pathToDirectory);
            File findFile = new File(pathToFind);


            try (Scanner fileScanner = new Scanner(directoryFile)) {
                while (fileScanner.hasNext()) {
                    directory.add(fileScanner.nextLine());
                }

            } catch (FileNotFoundException e) {
                System.out.println("File not found!");
            }

            try (Scanner fileScanner = new Scanner(findFile)) {
                while (fileScanner.hasNext()) {
                    find.add(fileScanner.nextLine());
                }

            } catch (FileNotFoundException e) {
                System.out.println("File not found!");
            }
        }
    }
  learner_created: false
- name: src/phonebook/Sort.java
  visible: true
  text: |
    package phonebook;

    import java.util.ArrayList;
    import java.util.List;

    public class Sort {
        private long startBubbleSortTime;
        private long endBubbleSortTime;
        private long startQuickSortTime;
        private long endQuickSortTime;

        public long getBubbleSortDuration() {
            return endBubbleSortTime - startBubbleSortTime;
        }

        public long getQuickSortDuration() {
            return endQuickSortTime - startQuickSortTime;
        }

        public List<String> bubbleSort(List<String> original, long linearSearchDuration) throws OutOfTimeException {
            startBubbleSortTime = System.currentTimeMillis();
            List<String> directory = new ArrayList<>(original);
            long currentSortTime;
            int i;
            int j;
            String temp;
            boolean swapped;
            for (i = 0; i < directory.size() - 1; i++) {
                currentSortTime = System.currentTimeMillis();
                if (currentSortTime - startBubbleSortTime > linearSearchDuration * 10) {
                    endBubbleSortTime = currentSortTime;
                    throw new OutOfTimeException(" - STOPPED, moved to linear search");
                }
                swapped = false;
                for (j = 0; j < directory.size() - i - 1; j++) {
                    if (directory.get(j).substring(directory.get(j).indexOf(" ") + 1).trim().compareTo(directory.get(j + 1).replaceAll("\\d", "").trim()) > 0) {
                        temp = directory.get(j);
                        directory.set(j, directory.get(j + 1));
                        directory.set(j + 1, temp);
                        swapped = true;
                    }
                }

                // IF no two elements were
                // swapped by inner loop, then break
                if (!swapped)
                    break;
            }
            endBubbleSortTime = System.currentTimeMillis();
            return directory;
        }

        public List<String> quickSort(List<String> original) {
            startQuickSortTime = System.currentTimeMillis();
            List<String> directory = new ArrayList<>(original);
            quickSortFunction(directory, 0, original.size() - 1);
            endQuickSortTime = System.currentTimeMillis();
            return directory;
        }

        public void quickSortFunction(List<String> directory, int begin, int end) {

            if (begin < end) {
                int partitionIndex = partition(directory, begin, end);

                quickSortFunction(directory, begin, partitionIndex - 1);
                quickSortFunction(directory, partitionIndex + 1, end);
            }

        }

        private int partition(List<String> list, int begin, int end) {
            String pivot = list.get(end).substring(list.get(end).indexOf(" ") + 1).trim();
            int i = (begin - 1);

            for (int j = begin; j < end; j++) {
                if (list.get(j).substring(list.get(j).indexOf(" ") + 1).trim().compareTo(pivot) <= 0) {
                    i++;

                    String swapTemp = list.get(i);
                    list.set(i, list.get(j));
                    list.set(j, swapTemp);
                }
            }

            String swapTemp = list.get(i + 1);
            list.set(i + 1, list.get(end));
            list.set(end, swapTemp);

            return i + 1;
        }
    }
  learner_created: false
- name: src/phonebook/Search.java
  visible: true
  text: |
    package phonebook;

    import java.util.List;

    public class Search {
        private int matchesCount;
        private long startLinearTime;
        private long endLinearTime;
        private long startJumpTime;
        private long endJumpTime;
        private long startBinaryTime;
        private long endBinaryTime;

        public long getLinearDuration() {
            return endLinearTime - startLinearTime;
        }

        public long getJumpDuration() {
            return endJumpTime - startJumpTime;
        }

        public long getBinaryDuration() {
            return endBinaryTime - startBinaryTime;
        }

        public int getMatchesCount() {
            return matchesCount;
        }

        public void linearSearch(List<String> directory, List<String> find) {
            matchesCount = 0;
            startLinearTime = System.currentTimeMillis();
            for (String value : find) {
                for (String s : directory) {
                    if (s.substring(s.indexOf(" ") + 1).trim().equals(value)) {
                        matchesCount++;
                        break;
                    }
                }
            }
            endLinearTime = System.currentTimeMillis();
        }

        public void jumpSearch(List<String> directory, List<String> find) {
            startJumpTime = System.currentTimeMillis();
            matchesCount = 0;
            int n = directory.size();
            // Finding block size to be jumped
            int step = (int) Math.floor(Math.sqrt(n));


            for (String name : find) {
                // If the element is present find the block where element is present
                int prevItem = 0;
                boolean notFound = false;

                while (directory.get(Math.min(step, n) - 1).substring(directory.get(Math.min(step, n) - 1).indexOf(" ") + 1).trim().compareTo(name) < 0) {
                    prevItem = step;
                    step += (int) Math.floor(Math.sqrt(n));
                    if (prevItem >= n)
                        notFound = true;
                }
                if (notFound) continue;

                // Using a linear search for element in block beginning with previous item
                while (directory.get(prevItem).substring(directory.get(prevItem).indexOf(" ") + 1).trim().compareTo(name) < 0) {
                    prevItem++;
                    if (prevItem == Math.min(step, n)) {
                        notFound = true;
                        break;
                    }
                }
                if (notFound) continue;

                if (directory.get(prevItem).substring(directory.get(prevItem).indexOf(" ") + 1).trim().equals(name))
                    matchesCount++;
            }
            endJumpTime = System.currentTimeMillis();
        }

        public void binarySearch(List<String> directory, List<String> find) {
            startBinaryTime = System.currentTimeMillis();
            matchesCount = 0;
            for (String name : find) {

                int low = 0;
                int high = directory.size() - 1;

                while (low <= high) {
                    int mid = low + ((high - low) / 2);
                    if (directory.get(mid).substring(directory.get(mid).indexOf(" ") + 1).trim().compareTo(name) < 0) {
                        low = mid + 1;
                    } else if (directory.get(mid).substring(directory.get(mid).indexOf(" ") + 1).trim().compareTo(name) > 0) {
                        high = mid - 1;
                    } else if (directory.get(mid).substring(directory.get(mid).indexOf(" ") + 1).trim().equals(name)) {
                        matchesCount++;
                        break;
                    }
                }
            }
            endBinaryTime = System.currentTimeMillis();
        }

    }
  learner_created: false
- name: src/phonebook/OutOfTimeException.java
  visible: true
  text: |
    package phonebook;

    public class OutOfTimeException extends Exception {

        public OutOfTimeException(String message) {
            super(message);
        }
    }
  learner_created: false
- name: test/PhoneBookTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nimport java.util.regex.Matcher;\n\
    import java.util.regex.Pattern;\n\npublic class PhoneBookTest extends StageTest\
    \ {\n\n    private long timeOnTestStart;\n    \n    @Override\n    public List<TestCase>\
    \ generate() {\n        timeOnTestStart = System.currentTimeMillis();\n      \
    \  return Arrays.asList(\n            new TestCase().setTimeLimit(30 * 60 * 1000)\n\
    \        );\n    }\n    \n    \n    private CheckResult checkPhrases(String reply,\
    \ String... phrases) {\n        reply = reply.toLowerCase();\n        for (String\
    \ phrase : phrases) {\n            if (!reply.contains(phrase.toLowerCase()))\
    \ {\n                return CheckResult.wrong(\"Not found the part `\" + phrase\
    \ + \"` in your output.\");\n            }\n        }\n        return CheckResult.correct();\n\
    \    }\n    \n    private List<String> findAll(String reply, String regex) {\n\
    \        Matcher matcher = Pattern.compile(regex).matcher(reply);\n        List<String>\
    \ groups = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    \n    \n\
    \    @Override\n    public CheckResult check(String reply, Object clue) {\n  \
    \      long realTime = System.currentTimeMillis() - timeOnTestStart;\n       \
    \ reply = reply.toLowerCase();\n        CheckResult res = checkPhrases(reply,\n\
    \                \"found\",\n                \"min.\",\n                \"sec.\"\
    ,\n                \"ms.\",\n                \"sorting time\",\n             \
    \   \"searching time\",\n                \"linear search\",\n                \"\
    bubble sort\",\n                \"jump search\",\n                \"quick sort\"\
    ,\n                \"binary search\",\n                \"hash table\",\n     \
    \           \"creating time\"\n        );\n        if (!res.isCorrect()) {\n \
    \           return res;\n        }\n    \n        List<String> stat1 = findAll(reply,\
    \ \"500 / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n\
    \    \n        if (stat1.size() + stat2.size() < 4) {\n            return CheckResult.wrong(\"\
    Your output should contain 4 times the phrase `500 / 500`\");\n        }\n   \
    \ \n        List<String> timestamps = findAll(reply, timeRegex);\n        if (timestamps.size()\
    \ != 10) {\n            return CheckResult.wrong(\"Your output should contain\
    \ 10 timer outputs, but found \"\n                    + timestamps.size());\n\
    \        }\n        // should not fail..\n        long t1 = parseTimestamp(timestamps.get(0));\n\
    \        long t2 = parseTimestamp(timestamps.get(1));\n        long t3 = parseTimestamp(timestamps.get(2));\n\
    \        long t4 = parseTimestamp(timestamps.get(3));\n        // qsort\n    \
    \    long t5 = parseTimestamp(timestamps.get(4));\n        long t6 = parseTimestamp(timestamps.get(5));\n\
    \        long t7 = parseTimestamp(timestamps.get(6));\n        // hash table\n\
    \        long t8 = parseTimestamp(timestamps.get(7));\n        long t9 = parseTimestamp(timestamps.get(8));\n\
    \        long t10 = parseTimestamp(timestamps.get(9));\n    \n        if (Math.abs(t3\
    \ + t4 - t2) > 100) {\n            return CheckResult.wrong(\"Your third and fourth\
    \ timer outputs in total (bubble sorting and searching) \" +\n               \
    \     \"should be equal to the second (total search time).\");\n        }\n  \
    \      if (Math.abs(t6 + t7 - t5) > 100) {\n            return CheckResult.wrong(\"\
    Your 6-th and 7-th timer outputs in total (qsort and searching) \" +\n       \
    \             \"should be equal to the 5-th (total search time).\");\n       \
    \ }\n        if (Math.abs(t9 + t10 - t8) > 100) {\n            return CheckResult.wrong(\"\
    Your 9-th and 10-th timer outputs in total (creating hashtable and searching)\
    \ \" +\n                    \"should be equal to the 8-th (total search time).\"\
    );\n        }\n    \n        long estimatedTime = t1 + t2 + t5 + t8;\n       \
    \ if (realTime < 1000) {\n            return CheckResult.wrong(\"Your program\
    \ completes too fast. Faster than a second!\");\n        }\n\n        if (Math.abs(estimatedTime\
    \ - realTime) > estimatedTime * 0.3) {\n            return CheckResult.wrong(\"\
    Your estimated time is not similar to real time the program works. \" +\n    \
    \                \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime\
    \ + \"ms\");\n        }\n        \n        if (t8 >= t5) {\n            return\
    \ CheckResult.wrong(\"Your hashtable works slower, than quick sort + binary search.\"\
    );\n        }\n        return CheckResult.correct();\n    }\n}\n"
  learner_created: false
feedback_link: https://hyperskill.org/projects/63/stages/475/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Sat, 29 Apr 2023 09:09:38 UTC"
record: 3
